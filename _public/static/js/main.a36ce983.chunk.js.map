{"version":3,"sources":["Parquet.tsx","model.ts","App.tsx","index.tsx"],"names":["cells","SIZE","size","col","row","Parquet","n","excluded","shapes","toggle","id","p","s","Set","map","console","log","width","height","transform","Array","from","block","has","onClick","k","Square","rest","x","y","className","DATA","Shape","data","tr","d","r","cx","cy","ShapeDisplay","ShapeList","offsets","kinds","positions","t","v","a","b","buildProblem","getKey","getValue","atMostOne","posCode","exludedSet","allValidTetras","flatMap","filter","every","inRange","tetraCode","length","tetra2id","Map","index","tetraId","tCode","get","tetra2pos","pos2tetra","reduce","previous","currentItem","group","set","push","vs","i","j","rv","tetraCodes","clause","placements","clauses","queries","responses","App","useState","solverStatus","setSolverStatus","worker","setWorker","problem","setProblem","onZ3Message","event","info","kind","payload","setSolved","setSuccess","result","output","trim","split","parseInt","ix","interpretResults","setShapes","useEffect","w","window","Worker","onmessage","solved","setSize","setExcluded","success","onReset","type","min","max","value","onChange","target","query","input","xs","join","toDimacs","args","postMessage","findIndex","splice","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a36ce983.chunk.js","sourcesContent":["import {HTMLAttributes, SVGAttributes} from \"react\";\n\nexport interface Pos {\n    col: number,\n    row: number,\n}\n\nexport const add = (a: Pos, b: Pos): Pos => ({col: a.col + b.col, row: a.row + b.row})\n\nexport interface Tetra {\n    p: Pos,\n    k: number,\n}\n\nconst SIZE = 30\n\nexport function* cells(size: number) {\n    for (let col = 0; col < size; col++)\n        for (let row = 0; row < size; row++)\n            yield {col, row}\n}\n\ntype ParquetProps = {\n    n: number,\n    excluded: Pos[],\n    shapes: Tetra[],\n    toggle: (p: Pos) => void,\n}\n\nconst Parquet = ({n, excluded, shapes, toggle}: ParquetProps) => {\n    const id = (p: Pos) => p.col + p.row * n\n    const s = new Set(excluded.map(id))\n    console.log(s)\n    return (\n        <svg width={n * SIZE + 10} height={n * SIZE + 10}>\n            <g transform={'translate(5,5)'}>\n                {Array.from(cells(n)).map(p => <Square p={p} block={s.has(id(p))} onClick={() => toggle(p)}/>)}\n                {shapes.map(s => <Shape p={s.p} k={s.k}/>)}\n            </g>\n        </svg>\n    )\n}\n\nexport default Parquet\n\ntype SquareProps = {\n    p: Pos,\n    block: boolean\n} & SVGAttributes<SVGElement>\n\nconst Square = ({p, block, ...rest}: SquareProps) => {\n    return (\n        <rect x={p.col * SIZE} y={p.row * SIZE} width={SIZE} height={SIZE}\n              className={block ? \"cell-block\" : \"cell-empty\"} {...rest}/>\n    )\n}\n\n\n// k -- kind -- 1..4\n\ntype ShapeProps = {\n    p: Pos,\n    k: number,\n}\n\nconst k1 = (s: number) => `M 0 0 v ${-s} h ${s} v ${-s} h ${s} v ${2 * s} h ${-s} v ${s} h ${-s} v ${-s}`\nconst k2 = (s: number) => `M 0 0 h ${s} v ${-s} h ${2 * s} v ${s} h ${-s} v ${s} h ${-2 * s} v ${-s}`\nconst k3 = (s: number) => `M 0 0 h ${2 * s} v ${s} h ${s} v ${s} h ${-2 * s} v ${-s} h ${-s} v ${-s}`\nconst k4 = (s: number) => `M 0 0 h ${s} v ${s} h ${s} v ${2 * s} h ${-s} v ${-s} h ${-s} v ${-2 * s}`\n\nconst DATA = [k1, k2, k3, k4]\n\nconst Shape = ({p, k}: ShapeProps) => {\n    const data = DATA[k - 1]\n    const tr = `translate(${p.col * SIZE},${p.row * SIZE})`\n    return (<>\n        <path d={data(SIZE)} transform={tr} className=\"shape\"/>\n        <circle r={3} cx={p.col * SIZE + SIZE / 2} cy={p.row * SIZE + SIZE / 2} className=\"mark\"/>\n    </>)\n}\n\ntype ShapeDisplayProps = {\n    p: Pos,\n    k: number\n}\nconst ShapeDisplay = ({p, k, ...rest}: ShapeDisplayProps & HTMLAttributes<SVGElement>) => {\n    const pad = 5\n    const tr = `translate(${5},${5})`\n    return (\n        <svg width={3 * SIZE + pad * 2} height={3 * SIZE + pad * 2} {...rest}>\n            <g transform={tr}>\n                <Shape p={p} k={k}/>\n            </g>\n        </svg>\n    )\n}\n\nexport const ShapeList = () => {\n    return (\n        <div className=\"d-flex flex-row\">\n            <ShapeDisplay p={{col: 1, row: 2}} k={1} className=\"m-2\"/>\n            <ShapeDisplay p={{col: 0, row: 2}} k={2} className=\"m-2\"/>\n            <ShapeDisplay p={{col: 0, row: 1}} k={3} className=\"m-2\"/>\n            <ShapeDisplay p={{col: 0, row: 0}} k={4} className=\"m-2\"/>\n        </div>\n    )\n}","import {add, cells, Pos, Tetra} from \"./Parquet\";\n\n\nconst offsets = [\n    [],\n    [{row: 0, col: 0}, {row: -1, col: 0}, {row: -1, col: 1}, {row: -2, col: 1},],\n    [{row: 0, col: 0}, {row: 0, col: 1}, {row: -1, col: 1}, {row: -1, col: 2},],\n    [{row: 0, col: 0}, {row: 0, col: 1}, {row: 1, col: 1}, {row: 1, col: 2},],\n    [{row: 0, col: 0}, {row: 1, col: 0}, {row: 1, col: 1}, {row: 2, col: 1},],\n]\n\nconst kinds = [1, 2, 3, 4]\n\nconst positions = (t: Tetra): Pos[] => offsets[t.k].map(v => add(v, t.p))\n\ntype TetraId = number // 1 .. no. of max valid placement\n\n\n// util:\nconst groupBy = <T, K extends keyof any, V>(list: T[], getKey: (item: T) => K, getValue: (item: T) => V) =>\n    list.reduce((previous, currentItem) => {\n        const group = getKey(currentItem);\n        if (!previous.has(group))\n            previous.set(group, []);\n        previous.get(group)!.push(getValue(currentItem));\n        return previous;\n    }, new Map<K, V[]>());\n\n\nexport interface ProblemStatement {\n    placements: Tetra[],\n    clauses: TetraId[][],\n}\n\n\nexport const buildProblem = (n: number, excluded: Pos[]): ProblemStatement => {\n    const posCode = (p: Pos) => p.col + n * p.row\n    const exludedSet = new Set(excluded.map(posCode))\n    const inRange = (p: Pos) => 0 <= p.col && p.col < n && 0 <= p.row && p.row < n\n\n    const allTetras: Tetra[] = Array.from(cells(n)).flatMap(p => kinds.map(k => ({p, k})))\n    const allValidTetras = allTetras.filter(t => {\n        const ps = positions(t)\n        return ps.every(p => inRange(p))\n    }).filter(t => {\n        const ps = positions(t)\n        return ps.every(p => !exludedSet.has(posCode(p)))\n    })\n\n    const tetraCode = (t: Tetra) => posCode(t.p) * kinds.length + t.k\n\n    const tetra2id = new Map(allValidTetras.map((t, index) => [tetraCode(t), index]))\n    const tetraId = (tCode: number): TetraId => tetra2id.get(tCode)! + 1\n\n    const tetra2pos = allValidTetras.flatMap(t => positions(t).map(p => [posCode(p), tetraCode(t)]))\n    const pos2tetra = groupBy(tetra2pos, x => x[0], x => x[1])\n\n    function atLeastOne(vs: number[]) { return vs.map(tetraId) }\n\n    function* atMostOne(vs: number[]) {\n        for (let i = 0; i < vs.length; i++)\n            for (let j = i + 1; j < vs.length; j++)\n                yield [-tetraId(vs[i]), -tetraId(vs[j])]\n    }\n\n    const rv: TetraId[][] = []\n    for (let [posCode, tetraCodes] of pos2tetra) {\n        rv.push(atLeastOne(tetraCodes))\n        for (const clause of atMostOne(tetraCodes))\n            rv.push(clause)\n    }\n\n    return {\n        placements: allValidTetras,\n        clauses: rv,\n    }\n}\n\n\nexport const toDimacs = (problem: ProblemStatement): string => {\n    const header = `p cnf ${problem.placements.length + 1} ${problem.clauses.length}\\n`\n    const clauses = problem.clauses.map(xs => xs.join(\" \") + \" 0\").join(\"\\n\")\n    return header + clauses\n}\n\n\nexport const interpretResults = (problem: ProblemStatement, output: string): Tetra[] => {\n    const vs = output.trim().split(\" \").map(x => parseInt(x) - 1).filter(x => x >= 0)\n    console.log(vs)\n    const s = new Set(vs)\n    const result = problem.placements.filter((x, ix) => s.has(ix))\n    return result\n}","import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport Parquet, {Pos, ShapeList, Tetra} from \"./Parquet\";\nimport {buildProblem, interpretResults, ProblemStatement, toDimacs} from \"./model\";\n\n\n// worker protocol\nconst queries = {VERIFY: \"VERIFY\"}\nconst responses = {\n    PROGRESS: \"PROGRESS\",\n    READY: \"READY\",\n    STDOUT: \"STDOUT\",\n    STDERR: \"STDERR\",\n    VERIFICATION_COMPLETE: \"VERIFICATION_COMPLETE\"\n}\n\nfunction App() {\n    const [solverStatus, setSolverStatus] = useState(\"\")\n    const [worker, setWorker] = useState<Worker>()\n\n    const [problem, setProblem] = useState<ProblemStatement>()\n\n    function postZ3Message(query: string, payload: any) {\n        console.info(\"[Window] → Z3 (\" + query + \"):\", payload);\n        worker!.postMessage({kind: query, payload: payload});\n    }\n\n    function onZ3Message(event: { data: { kind: string; payload: any; }; }) {\n        console.info(\"Z3 → [Window]:\", event);\n        var kind = event.data.kind;\n        var payload = event.data.payload;\n        switch (kind) {\n            case responses.PROGRESS:\n                // disableButton(payload);\n                console.log(payload, \"progress\");\n                setSolverStatus(\"Z3 is loading...\")\n                break;\n            case responses.READY:\n                // enableButton();\n                console.log(\"ready\");\n                setSolverStatus(\"Z3 is ready\")\n                break;\n            case responses.STDOUT:\n                console.log(payload, \"stdout-msg\")\n                if (payload === \"sat\" || payload === \"unsat\") {\n                    // read status\n                    setSolved(true)\n                    setSuccess(payload === \"sat\")\n                } else {\n                    // read assignments\n                    const result = interpretResults(problem!, payload)\n                    console.log(result)\n                    setShapes(result)\n                }\n                // combine results: 2 lines\n                // SAT/UNSAT + vars\n                break;\n            case responses.STDERR:\n                console.log(payload, \"stderr-msg\")\n                break;\n            case responses.VERIFICATION_COMPLETE:\n                // enableButton();\n                //console.log(\"-- Verification complete (\" + elapsed + \"ms)\", \"info-msg\");\n                break;\n        }\n    }\n\n    useEffect(() => {\n        // start Z3 worker\n        const w = new window.Worker(\"worker.js\");\n        setWorker(w)\n    }, [])\n\n    useEffect(() => {\n        if (!worker) return\n        worker.onmessage = onZ3Message\n    }, [worker, onZ3Message])\n\n\n    const [solved, setSolved] = useState(false)\n    const [size, setSize] = useState(4)\n    const [excluded, setExcluded] = useState<Pos[]>([\n        {row: 0, col: 0},\n        {row: 0, col: 3},\n        {row: 1, col: 0},\n        {row: 3, col: 3},\n    ])\n    const [success, setSuccess] = useState(false)\n    const [shapes, setShapes] = useState<Tetra[]>([])\n\n    const onToggle = (p: Pos) => {\n        const ix = excluded.findIndex(v => v.col === p.col && v.row === p.row)\n        if (ix === -1) {\n            excluded.splice(-1, 0, p)\n        } else {\n            excluded.splice(ix, 1)\n        }\n        setExcluded(Array.from(excluded))\n    }\n\n    const onClear = () => {\n        onReset()\n        setExcluded([])\n    }\n\n    const onSolve = () => {\n        const problem = buildProblem(size, excluded)\n        console.log(problem)\n        const input = toDimacs(problem)\n        setProblem(problem)\n        postZ3Message(queries.VERIFY, {args: [], input: input})\n    }\n\n    const onReset = () => {\n        setSolved(false)\n        setShapes([])\n    }\n\n    return (\n        <div id=\"app\" className=\"d-flex flex-column justify-content-start align-items-center m-3\">\n            <div>\n                <ol>\n                    <li>Wait for Z3 to load...</li>\n                    <li>Select a grid size</li>\n                    <li>Click on a cell to include/exclude it</li>\n                    <li>Solve to see possible arrangement</li>\n                </ol>\n            </div>\n            <div className=\"d-flex flex-row\">\n                <span className=\"m-2\">Size:</span>\n                <input className=\"m-2\" type={'range'} min={3} max={20} value={size}\n                       onChange={x => setSize(parseInt(x.target.value))}/>\n                <strong className=\"m-2\">{size}</strong>\n            </div>\n            <div className=\"d-flex flex-row\">\n                {!solved && <button className=\"btn btn-outline-primary m-2\" onClick={onSolve}>Solve</button>}\n                {solved && <button className=\"btn btn-outline-danger m-2\" onClick={onReset}>Reset</button>}\n                <button className=\"btn btn-outline-secondary m-2\" onClick={onClear}>Clear</button>\n            </div>\n            <p className=\"m-1\"><em>{solverStatus}</em></p>\n            <p className=\"m-1\">\n                {!solved && <span>click solve</span>}\n                {solved && <strong>{success ? 'SAT ✅' : 'UNSAT 🤷‍♂️'}</strong>}\n            </p>\n            <Parquet n={size} excluded={excluded} shapes={shapes} toggle={onToggle}/>\n\n            <p>Available Shapes:</p>\n            <ShapeList />\n        </div>\n    );\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}